// polyfill for performance.now on older webkit
// @see https://gist.github.com/paulirish/5438650
if (typeof window.performance === 'undefined') {
    window.performance = {};
}
if (!window.performance.now) {

    var nowOffset = Date.now();

    if (performance.timing && performance.timing.navigationStart) {
        nowOffset = performance.timing.navigationStart;
    }
    window.performance.now = function now() {
        return Date.now() - nowOffset;
    }
}

// Based on cycle.js
// https://github.com/douglascrockford/JSON-js/blob/master/cycle.js

// Make a deep copy of an object or array, assuring that there is at most
// one instance of each object or array in the resulting structure. The
// duplicate references (which might be forming cycles) are replaced with
// an object of the form
//      {$ref: PATH}
// where the PATH is a JSONPath string that locates the first occurrence.
var decycle = function (object) {
    var objects = [],   // Keep a reference to each unique object or array
            paths = [];     // Keep the path to each unique object or array

    return (function derez(value, path) {
        var i,          // The loop counter
            name,       // Property name
            nu;         // The new object or array
        switch (typeof value) {
        case 'object':
            if (value instanceof HTMLElement) {
                return value.innerHTML.toString().trim();
            }
            if (!value) {
                return null;
            }
            for (i = 0; i < objects.length; i += 1) {
                if (objects[i] === value) {
                    return {$ref: paths[i]};
                }
            }
            objects.push(value);
            paths.push(path);
            if (value instanceof Array) {
                nu = [];
                for (i = 0; i < value.length; i += 1) {
                    nu[i] = derez(value[i], path + '[' + i + ']');
                }
            } else {
                nu = {};
                for (name in value) {
                    if (name[0] !== '$' && Object.prototype.hasOwnProperty.call(value, name)) {
                        nu[name] = derez(value[name],
                            path + '[' + JSON.stringify(name) + ']');
                    }
                }
            }
            return nu;
        case 'number':
        case 'string':
        case 'boolean':
            return value;
        }
    }(object, '$'));
};
// End
// ===

// helper to extract dependencies from function arguments
// not all versions of AngularJS expose annotate
var annotate = angular.injector().annotate;
if (!annotate) {
    annotate = (function () {

        var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
        var FN_ARG_SPLIT = /,/;
        var FN_ARG = /^\s*(_?)(.+?)\1\s*$/;
        var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

        // TODO: should I keep these assertions?
        function assertArg(arg, name, reason) {
            if (!arg) {
                throw new Error("Argument '" + (name || '?') + "' is " + (reason || "required"));
            }
            return arg;
        }
        function assertArgFn(arg, name, acceptArrayAnnotation) {
            if (acceptArrayAnnotation && angular.isArray(arg)) {
                arg = arg[arg.length - 1];
            }

            assertArg(angular.isFunction(arg), name, 'not a function, got ' +
                    (arg && typeof arg == 'object' ? arg.constructor.name || 'Object' : typeof arg));
            return arg;
        }

        return function (fn) {
            var $inject,
                fnText,
                argDecl,
                last;

            if (typeof fn == 'function') {
                if (!($inject = fn.$inject)) {
                    $inject = [];
                    fnText = fn.toString().replace(STRIP_COMMENTS, '');
                    argDecl = fnText.match(FN_ARGS);
                    argDecl[1].split(FN_ARG_SPLIT).forEach(function(arg) {
                        arg.replace(FN_ARG, function(all, underscore, name) {
                            $inject.push(name);
                        });
                    });
                    fn.$inject = $inject;
                }
            } else if (angular.isArray(fn)) {
                last = fn.length - 1;
                assertArgFn(fn[last], 'fn');
                $inject = fn.slice(0, last);
            } else {
                assertArgFn(fn, 'fn', true);
            }
            return $inject;
        };
    }());
}

var isEmpty = function (object) {
    var prop;
    for (prop in object) {
        if (object.hasOwnProperty(prop)) {
            return false;
        }
    }
    return true;
};
